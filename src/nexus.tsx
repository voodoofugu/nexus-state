import React from "react";
import {
  UpdateFunc,
  FuncsCallT,
  FuncsAT,
  NexusContextT,
  MappedActions,
} from "./types";

function createReducer(initialFuncs: FuncsAT) {
  return function reducerNexus(
    state: StatesT,
    fData: FuncsCallT,
    recursiveCall?: boolean // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é –µ—Å–ª–∏ –≤ payload –º–∞—Å—Å–∏–≤
  ): StatesT {
    // –ï—Å–ª–∏ payload ‚Äî –º–∞—Å—Å–∏–≤ (–±–∞—Ç—á–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π)
    if (Array.isArray(fData.payload) && !recursiveCall) {
      return fData.payload.reduce((currentState, funcData: FuncsCallT) => {
        return reducerNexus(currentState, funcData, true); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      }, state);
    }

    // –ï—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const { stateKey, payload, type } = fData;

    // –û–±–Ω–æ–≤–ª—è–µ–º stateKey, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (stateKey) {
      const currentValue = state[stateKey];

      // –ï—Å–ª–∏ payload ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
      const newValue =
        typeof payload === "function"
          ? (payload as UpdateFunc<typeof currentValue>)(currentValue)
          : payload;

      if (newValue != currentValue) {
        return {
          ...state,
          [stateKey]: newValue,
        };
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ actions
    if (type) {
      const actionConfig = initialFuncs[type];

      // –ï—Å–ª–∏ —É –¥–µ–π—Å—Ç–≤–∏—è –µ—Å—Ç—å fData —Ñ—É–Ω–∫—Ü–∏—è
      if (actionConfig?.fData) {
        actionConfig.fData(payload); // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
      }
    }

    return state; // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  };
}

function getContextMethods(initialStates: StatesT): {
  get: () => StatesT;
  set: (value: Partial<StatesT>) => void;
  subscribe: (callback: () => void) => () => void;
} {
  let store = initialStates;
  const subscribers = React.useRef(new Set<() => void>());
  // –¥–æ–±–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –Ω–∞ 16–º—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const timerId = React.useRef<ReturnType<typeof setTimeout> | null>(null);

  const get = React.useCallback(() => store, []);

  const set = React.useCallback((value: Partial<StatesT>) => {
    store = { ...store, ...value };

    if (timerId.current) {
      clearTimeout(timerId.current);
    }

    timerId.current = setTimeout(() => {
      subscribers.current.forEach((callback) => callback());
      timerId.current = null;
    }, 16);
  }, []);

  const subscribe = React.useCallback((callback: () => void) => {
    subscribers.current.add(callback);
    return () => subscribers.current.delete(callback);
  }, []);

  return {
    get,
    set,
    subscribe,
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function createContextValue(
  initialStates: StatesT,
  reducer: (state: StatesT, fData: FuncsCallT) => StatesT
) {
  const stateData = getContextMethods(initialStates);

  function get<K extends keyof StatesT>(stateName: K): StatesT[K] {
    if (!(stateName in initialStates)) {
      console.error(`State "${String(stateName)}" in useNexus not found üë∫`);
    }

    return React.useSyncExternalStore(
      stateData.subscribe,
      () => stateData.get()[stateName] ?? initialStates[stateName],
      () => initialStates[stateName] // –¥–ª—è SSR
    );
  }

  function getAll(): StatesT {
    return React.useSyncExternalStore(
      stateData.subscribe,
      stateData.get,
      () => initialStates // –¥–ª—è SSR
    );
  }

  function selector<K extends keyof StatesT>(
    select: (state: StatesT) => StatesT[K]
  ): StatesT[K] {
    return React.useSyncExternalStore(
      stateData.subscribe,
      () => select(stateData.get()),
      () => select(initialStates) // –¥–ª—è SSR
    );
  }

  function dispatch(fData: FuncsCallT): void {
    const currentState = stateData.get();
    const newState = reducer(currentState, fData);
    if (currentState !== newState) {
      stateData.set(newState);
    }
  }

  return {
    get,
    getAll,
    selector,
    dispatch,
    subscribe: stateData.subscribe,
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const NexusContext = React.createContext<NexusContextT | null>(null);

let nexusDispatchRef: ((fData: FuncsCallT) => void) | null = null;
const NexusProvider: React.FC<{
  initialStates: StatesT;
  initialFuncs?: FuncsAT;
  children: React.ReactNode;
}> = ({ initialStates, initialFuncs, children }) => {
  const immutableInitialStates = React.useMemo(
    () => JSON.parse(JSON.stringify(initialStates)),
    [initialStates]
  );

  // –°–æ–∑–¥–∞—ë–º reducer
  const reducer = React.useMemo(
    () => createReducer(initialFuncs || {}),
    [initialFuncs]
  );

  const contextValue = {
    ...createContextValue(immutableInitialStates, reducer),
    initialStates, // –¥–æ–±–∞–≤–ª—è–µ–º initialStates –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  };

  nexusDispatchRef = contextValue.dispatch;

  return (
    <NexusContext.Provider value={contextValue}>
      {children}
    </NexusContext.Provider>
  );
};

// HOOKS
// useNexus
function contextExist(): NexusContextT {
  const ctx = React.useContext(NexusContext);
  if (!ctx) {
    throw new Error("NexusProvider not found üë∫");
  }
  return ctx;
}

function useNexus<K extends keyof StatesT>(stateName: K): StatesT[K];
function useNexus(): StatesT;
function useNexus(stateName?: keyof StatesT) {
  const ctx = contextExist();
  return stateName ? ctx.get(stateName) : ctx.getAll();
}

// useNexusSelect
const useNexusSelect = <K extends keyof StatesT>(
  selector: (state: StatesT) => StatesT[K]
): StatesT[K] => {
  const ctx = contextExist();

  return ctx.selector(selector);
};

// FUNCTIONS
// nexusTrigger
function nexusTrigger(fData: MappedActions[keyof MappedActions]): void {
  if (!nexusDispatchRef) {
    throw new Error(
      "nexusTrigger is not initialized. Make sure NexusProvider is used üë∫"
    );
  }

  nexusDispatchRef({
    payload: Array.isArray(fData) ? fData : [fData],
  });
}

// nexusUpdate
function nexusUpdate<K extends keyof StatesT>(updates: {
  [key in K]: StatesT[key] | ((prevState: StatesT[key]) => StatesT[key]);
}) {
  if (!nexusDispatchRef) {
    throw new Error(
      "nexusTrigger is not initialized. Make sure NexusProvider is used üë∫"
    );
  }

  if ("_NEXUS_" in updates) {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–µ–π—Ç–æ–≤
    const newState = updates["_NEXUS_"] as StatesT;

    nexusDispatchRef({
      payload: Object.keys(newState).map((key) => ({
        stateKey: key as keyof StatesT,
        payload: newState[key as keyof StatesT],
      })),
    });
  } else {
    const actionsArray = Object.entries(updates).map(
      ([stateKey, updateValue]) => {
        const key = stateKey as K;

        return {
          stateKey: key,
          payload:
            // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (prevState)
            typeof updateValue === "function"
              ? (updateValue as (prevState: StatesT[K]) => StatesT[K])
              : updateValue,
        };
      }
    );

    nexusDispatchRef({
      payload: actionsArray,
    });
  }
}

export { NexusProvider, useNexus, useNexusSelect, nexusTrigger, nexusUpdate };
