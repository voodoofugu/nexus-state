import React from "react";

export type ActionType = {
  type: string;
  payload?: any;
};

export default function context<Context extends Record<string, unknown>>(
  initialStates: Context,
  reducer: (state: Context, action: ActionType) => Context
) {
  function useStatesContextData(): {
    get: () => Context;
    set: (value: Partial<Context>) => void;
    subscribe: (callback: () => void) => () => void;
  } {
    const store = React.useRef(initialStates);

    const get = React.useCallback(() => store.current, []);

    const subscribers = React.useRef(new Set<() => void>());

    const set = React.useCallback((value: Partial<Context>) => {
      store.current = { ...store.current, ...value };
      subscribers.current.forEach((callback) => callback());
    }, []);

    const subscribe = React.useCallback((callback: () => void) => {
      subscribers.current.add(callback);
      return () => subscribers.current.delete(callback);
    }, []);

    return {
      get,
      set,
      subscribe,
    };
  }

  type UseStatesContextDataReturnType = ReturnType<typeof useStatesContextData>;

  const StatesContext =
    React.createContext<UseStatesContextDataReturnType | null>(null);

  function NexusContextProvider({
    children,
  }: Readonly<{ children: React.ReactNode }>) {
    return (
      <StatesContext.Provider value={useStatesContextData()}>
        {children}
      </StatesContext.Provider>
    );
  }

  // –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª—é—á—É
  function useGetNexus<K extends keyof Context>(stateName: K): Context[K] {
    const statesContext = React.useContext(StatesContext);
    if (!statesContext) {
      console.error(`NexusContextProvider not found üë∫`);
      return undefined as Context[K]; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }

    const getState = React.useCallback(() => {
      const state = statesContext.get();
      if (
        typeof state !== "object" ||
        state === null ||
        !(stateName in state)
      ) {
        console.error(`State "${stateName.toString()}" not found üë∫`);
        return undefined as Context[K];
      }
      return state[stateName];
    }, [stateName, statesContext]);

    return React.useSyncExternalStore(
      statesContext.subscribe,
      getState,
      getState
    );
  }

  // –•—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª—é—á—É –∏–ª–∏ dispatch action
  function useSetNexus(): (value: Partial<Context> | ActionType) => void {
    const statesContext = React.useContext(StatesContext);
    if (!statesContext) {
      console.error(`NexusContextProvider not found üë∫`);
      return () => {}; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    return (value: Partial<Context> | ActionType) => {
      if ("type" in value) {
        const newState = reducer(statesContext.get(), value as ActionType);
        statesContext.set(newState);
      } else {
        statesContext.set(value as Partial<Context>);
      }
    };
  }

  // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  function useNexusAll(): Context {
    const statesContext = React.useContext(StatesContext);
    if (!statesContext) {
      console.error(`NexusContextProvider not found üë∫`);
      return initialStates; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    return React.useSyncExternalStore(
      statesContext.subscribe,
      statesContext.get,
      () => initialStates
    );
  }

  return {
    useGetNexus,
    useSetNexus,
    useNexusAll,
    NexusContextProvider,
  };
}
