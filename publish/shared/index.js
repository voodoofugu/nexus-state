import{useRef as t,useState as e,useEffect as n,useSyncExternalStore as s}from"react";function r(t){const{state:e,actions:n}=t;let s=Object.assign({},e);const r=new Map,c=[],o=t=>{var e;"*"===t?r.forEach((t=>t.forEach((t=>t())))):(t.forEach((t=>{var e;return null===(e=r.get(t))||void 0===e?void 0:e.forEach((t=>t()))})),null===(e=r.get("*"))||void 0===e||e.forEach((t=>t())))},u=t=>{const e=Object.assign({},s),n="function"==typeof t?t(e):t;let r=Object.assign(Object.assign({},s),n);for(const t of c){const n=t(e,r);void 0!==n&&(r=n)}const u=[];for(const t in r)s[t]!==r[t]&&u.push(t);u.length&&(s=r,o(u))};return{state:{getNexus:function(t){return void 0!==t?s[t]:s},setNexus:u,nexusReset:()=>{s=Object.assign({},e),o("*")},nexusSubscribe:(t,e)=>{const n=Array.isArray(t)?t:[t];return n.forEach((t=>{r.has(t)||r.set(t,new Set),r.get(t).add(e)})),()=>{n.forEach((t=>{var n;return null===(n=r.get(t))||void 0===n?void 0:n.delete(e)}))}},nexusGate:t=>{c.push(t)}},actions:n?n(u):{}}}function c(c){const{state:o,actions:u}=r(c),a=u;return{state:Object.assign(Object.assign({},o),{useNexus:function(t){return s((e=>o.nexusSubscribe(t?[t]:"*",e)),(()=>{const e=o.getNexus();return t?e[t]:e}))},useNexusSelector:function(s,r){const c=t(s(o.getNexus())),[u,a]=e(c.current);return n((()=>{const t=()=>{const t=s(o.getNexus());t!==c.current&&(c.current=t,a(t))},e=o.nexusSubscribe(r,t);return t(),e}),[r,s]),u}}),actions:a}}export{c as createReactStore,r as createStore};
